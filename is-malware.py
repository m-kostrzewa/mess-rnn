#!/usr/bin/python3
#
# Runs a single sample through the whole data collection pipeline, and then
# uses a pretrained model to determine if the sample is malicious or not.
#

from common import *
import analyze

log = logging.getLogger("ismalware")
config = configparser.ConfigParser()


def main():
    args = parse_args()
    init(args.config)
    collect_data()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", type=str, required=True,
                        help="Path to analyzed sample. Must be relative to "
                             "raw_base_dir in config.")
    parser.add_argument("--descriptor", type=str, default=None,
                        help="Path to sample descriptor (if needed). "
                             "Must be relative to raw_base_dir in config.")
    parser.add_argument("--config", type=str, default="mess-rnn.cfg",
                        help="Config filepath.")
    return parser.parse_args()


def init(config_path):
    config.read([config_path])
    init_logger(config)


def collect_data():
    log.info("--- STEP 1: Collecting data (analyze.py) ---")

    in_base_dir = config.get("Workspace", "raw_base_dir")
    samples = [os.path.join(in_base_dir, args.input)]
    descriptors = [os.path.join(in_base_dir, args.descriptor)] \
                  if args.descriptor is not None else []

    analyze.init(args.config)
    analyze.analyze(samples_paths=samples, descriptors_paths=descriptors)


if __name__ == "__main__":
    main()
